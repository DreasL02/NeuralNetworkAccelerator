// Generated by CIRCT firtool-1.54.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module ProcessingElement(	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3
  input         clock,	// <stdin>:4:11, :25:11, :46:11, :67:11, :88:11, :109:11, :130:11, :151:11, :172:11, :193:11, :214:11, :235:11, :256:11, :277:11, :298:11, :319:11
                reset,	// <stdin>:5:11, :26:11, :47:11, :68:11, :89:11, :110:11, :131:11, :152:11, :173:11, :194:11, :215:11, :236:11, :257:11, :278:11, :299:11, :320:11
  input  [15:0] io_in_a,	// \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:6:14
                io_in_b,	// \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:6:14
  output [15:0] io_out_a,	// \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:6:14
                io_out_b,	// \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:6:14
  output [31:0] io_out_c	// \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:6:14
);

  reg [15:0] a_reg;	// \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:15:22
  reg [15:0] b_reg;	// \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:16:22
  reg [31:0] c_reg;	// \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:17:22
  always @(posedge clock) begin	// <stdin>:4:11, :25:11, :46:11, :67:11, :88:11, :109:11, :130:11, :151:11, :172:11, :193:11, :214:11, :235:11, :256:11, :277:11, :298:11, :319:11
    if (reset) begin	// <stdin>:4:11, :25:11, :46:11, :67:11, :88:11, :109:11, :130:11, :151:11, :172:11, :193:11, :214:11, :235:11, :256:11, :277:11, :298:11, :319:11
      a_reg <= 16'h0;	// \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:15:22
      b_reg <= 16'h0;	// \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:15:22, :16:22
      c_reg <= 32'h0;	// \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:17:22
    end
    else begin	// <stdin>:4:11, :25:11, :46:11, :67:11, :88:11, :109:11, :130:11, :151:11, :172:11, :193:11, :214:11, :235:11, :256:11, :277:11, :298:11, :319:11
      a_reg <= io_in_a;	// \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:15:22
      b_reg <= io_in_b;	// \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:16:22
      c_reg <= {16'h0, io_in_a} * {16'h0, io_in_b} + c_reg;	// \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:15:22, :17:22, :21:{20,30}
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3
      `FIRRTL_BEFORE_INITIAL	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3
      automatic logic [31:0] _RANDOM[0:1];	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3
        `INIT_RANDOM_PROLOG_	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3
        end	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3
        a_reg = _RANDOM[1'h0][15:0];	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3, \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:15:22
        b_reg = _RANDOM[1'h0][31:16];	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3, \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:15:22, :16:22
        c_reg = _RANDOM[1'h1];	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3, \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:17:22
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3
      `FIRRTL_AFTER_INITIAL	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_a = a_reg;	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3, \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:15:22
  assign io_out_b = b_reg;	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3, \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:16:22
  assign io_out_c = c_reg;	// <stdin>:3:3, :24:3, :45:3, :66:3, :87:3, :108:3, :129:3, :150:3, :171:3, :192:3, :213:3, :234:3, :255:3, :276:3, :297:3, :318:3, \\src\\main\\scala\\systolic_array\\ProcessingElement.scala:17:22
endmodule

module SystolicArray(	// <stdin>:339:3
  input         clock,	// <stdin>:340:11
                reset,	// <stdin>:341:11
  input  [15:0] io_a_0,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_a_1,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_a_2,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_a_3,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_b_0,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_b_1,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_b_2,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_b_3,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
  output [31:0] io_c_0,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_c_1,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_c_2,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_c_3,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_c_4,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_c_5,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_c_6,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_c_7,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_c_8,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_c_9,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_c_10,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_c_11,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_c_12,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_c_13,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_c_14,	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
                io_c_15	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:6:14
);

  wire [15:0] _ProcessingElement_14_io_out_b;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_13_io_out_b;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_12_io_out_b;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_11_io_out_a;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_10_io_out_a;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_10_io_out_b;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_9_io_out_a;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_9_io_out_b;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_8_io_out_a;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_8_io_out_b;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_7_io_out_a;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_6_io_out_a;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_6_io_out_b;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_5_io_out_a;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_5_io_out_b;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_4_io_out_a;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_4_io_out_b;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_3_io_out_a;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_2_io_out_a;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_2_io_out_b;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_1_io_out_a;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_1_io_out_b;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_io_out_a;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  wire [15:0] _ProcessingElement_io_out_b;	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
  ProcessingElement ProcessingElement (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (io_a_0),
    .io_in_b  (io_b_0),
    .io_out_a (_ProcessingElement_io_out_a),
    .io_out_b (_ProcessingElement_io_out_b),
    .io_out_c (io_c_0)
  );
  ProcessingElement ProcessingElement_1 (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (io_a_1),
    .io_in_b  (_ProcessingElement_io_out_b),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_out_a (_ProcessingElement_1_io_out_a),
    .io_out_b (_ProcessingElement_1_io_out_b),
    .io_out_c (io_c_1)
  );
  ProcessingElement ProcessingElement_2 (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (io_a_2),
    .io_in_b  (_ProcessingElement_1_io_out_b),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_out_a (_ProcessingElement_2_io_out_a),
    .io_out_b (_ProcessingElement_2_io_out_b),
    .io_out_c (io_c_2)
  );
  ProcessingElement ProcessingElement_3 (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (io_a_3),
    .io_in_b  (_ProcessingElement_2_io_out_b),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_out_a (_ProcessingElement_3_io_out_a),
    .io_out_b (/* unused */),
    .io_out_c (io_c_3)
  );
  ProcessingElement ProcessingElement_4 (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (_ProcessingElement_io_out_a),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_in_b  (io_b_1),
    .io_out_a (_ProcessingElement_4_io_out_a),
    .io_out_b (_ProcessingElement_4_io_out_b),
    .io_out_c (io_c_4)
  );
  ProcessingElement ProcessingElement_5 (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (_ProcessingElement_1_io_out_a),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_in_b  (_ProcessingElement_4_io_out_b),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_out_a (_ProcessingElement_5_io_out_a),
    .io_out_b (_ProcessingElement_5_io_out_b),
    .io_out_c (io_c_5)
  );
  ProcessingElement ProcessingElement_6 (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (_ProcessingElement_2_io_out_a),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_in_b  (_ProcessingElement_5_io_out_b),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_out_a (_ProcessingElement_6_io_out_a),
    .io_out_b (_ProcessingElement_6_io_out_b),
    .io_out_c (io_c_6)
  );
  ProcessingElement ProcessingElement_7 (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (_ProcessingElement_3_io_out_a),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_in_b  (_ProcessingElement_6_io_out_b),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_out_a (_ProcessingElement_7_io_out_a),
    .io_out_b (/* unused */),
    .io_out_c (io_c_7)
  );
  ProcessingElement ProcessingElement_8 (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (_ProcessingElement_4_io_out_a),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_in_b  (io_b_2),
    .io_out_a (_ProcessingElement_8_io_out_a),
    .io_out_b (_ProcessingElement_8_io_out_b),
    .io_out_c (io_c_8)
  );
  ProcessingElement ProcessingElement_9 (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (_ProcessingElement_5_io_out_a),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_in_b  (_ProcessingElement_8_io_out_b),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_out_a (_ProcessingElement_9_io_out_a),
    .io_out_b (_ProcessingElement_9_io_out_b),
    .io_out_c (io_c_9)
  );
  ProcessingElement ProcessingElement_10 (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (_ProcessingElement_6_io_out_a),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_in_b  (_ProcessingElement_9_io_out_b),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_out_a (_ProcessingElement_10_io_out_a),
    .io_out_b (_ProcessingElement_10_io_out_b),
    .io_out_c (io_c_10)
  );
  ProcessingElement ProcessingElement_11 (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (_ProcessingElement_7_io_out_a),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_in_b  (_ProcessingElement_10_io_out_b),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_out_a (_ProcessingElement_11_io_out_a),
    .io_out_b (/* unused */),
    .io_out_c (io_c_11)
  );
  ProcessingElement ProcessingElement_12 (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (_ProcessingElement_8_io_out_a),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_in_b  (io_b_3),
    .io_out_a (/* unused */),
    .io_out_b (_ProcessingElement_12_io_out_b),
    .io_out_c (io_c_12)
  );
  ProcessingElement ProcessingElement_13 (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (_ProcessingElement_9_io_out_a),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_in_b  (_ProcessingElement_12_io_out_b),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_out_a (/* unused */),
    .io_out_b (_ProcessingElement_13_io_out_b),
    .io_out_c (io_c_13)
  );
  ProcessingElement ProcessingElement_14 (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (_ProcessingElement_10_io_out_a),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_in_b  (_ProcessingElement_13_io_out_b),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_out_a (/* unused */),
    .io_out_b (_ProcessingElement_14_io_out_b),
    .io_out_c (io_c_14)
  );
  ProcessingElement ProcessingElement_15 (	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .clock    (clock),
    .reset    (reset),
    .io_in_a  (_ProcessingElement_11_io_out_a),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_in_b  (_ProcessingElement_14_io_out_b),	// \\src\\main\\scala\\systolic_array\\SystolicArray.scala:15:69
    .io_out_a (/* unused */),
    .io_out_b (/* unused */),
    .io_out_c (io_c_15)
  );
endmodule

